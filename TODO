Author: Susana Posada Cespedes
-> User option to indicate if module table contains module names and variant names
-> Add R and functions subfolders to the search path (when modseq_main.R is run), or add functions to an R package
-> Use fastqsampler
-> fastq file after paired-end, read mapping and filtering
-> Simulated data: use read simulators, such as GemSim 
-> Consider using beta-binomial test of strand bias to account for systematic sequencing errors

Run3_gls
-> Verbose level fo run3
-> Map.mode using pairwise alignment
-> mismatch allowance per module (at the moment perfect match or max. allowance per search round)

Run4_bwa
-> Exclude duplicates in the distribution (flags 1024, 1040)?
-> Plot of the progression of the alignment filtering

Run5_bwa
-> For reads that are realigned, the MD is not provided (it is used for the pileup model) 
-> Rcpp errror:
qError in dyn.load("/tmp/Rtmp5Qowjy/sourcecpp_5ff840502215/sourceCpp_1.so") :
  unable to load shared object '/tmp/Rtmp5Qowjy/sourcecpp_5ff840502215/sourceCpp_1.so':
  /tmp/Rtmp5Qowjy/sourcecpp_5ff840502215/sourceCpp_1.so: failed to map segment from shared object: Operation not permitted
Calls: source ... sourceCpp -> source -> withVisible -> eval -> eval -> dyn.load

-> Susana: Docker (option for running modseq in a platform compatible way)
RStudio server: To share files and folders between the docker image and host OS one can use the -v option. This acts much like running RStudio in the working directory.
https://github.com/rocker-org/rocker/wiki/Using-the-RStudio-image

-> Steven: Shiny server (option for the visualization)
Asynchronous exchange for long-running calculations in R
https://hub.docker.com/r/rocker/shiny/

-> Define the decision making process (plots and statistics)

